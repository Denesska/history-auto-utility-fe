openapi: "3.0.0"
paths:
  /car:
    post:
      operationId: "CarController_createCar"
      summary: "Create a new car"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddCarDto"
      responses:
        201:
          description: "The car has been successfully created."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CarDto"
        403:
          description: "Forbidden."
      tags:
        - "car"
      security:
        - bearer: []
    put:
      operationId: "CarController_updateCar"
      summary: "Update a car"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCarDto"
      responses:
        200:
          description: "The car has been successfully updated."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CarDto"
        404:
          description: "Car not found."
      tags:
        - "car"
      security:
        - bearer: []
    get:
      operationId: "CarController_getAllCars"
      summary: "Get all cars"
      parameters: []
      responses:
        200:
          description: "Return list of cars."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CarDto"
      tags:
        - "car"
      security:
        - bearer: []
  /car/{id}:
    get:
      operationId: "CarController_getCar"
      summary: "Get car by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "Return car details."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CarDto"
        404:
          description: "Car not found."
      tags:
        - "car"
      security:
        - bearer: []
    delete:
      operationId: "CarController_deleteCar"
      summary: "Delete a car"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "The car has been successfully deleted."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CarDto"
        404:
          description: "Car not found."
      tags:
        - "car"
      security:
        - bearer: []
  /car/user/{userId}:
    get:
      operationId: "CarController_getCarsByUser"
      summary: "Get all cars for a specific user"
      parameters:
        - name: "user-id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "Return list of cars."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CarDto"
      tags:
        - "car"
      security:
        - bearer: []
  /maintenance-record:
    post:
      operationId: "MaintenanceRecordController_createMaintenanceRecord"
      summary: "Create a new maintenance record"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMaintenanceRecordDto"
      responses:
        201:
          description: "The maintenance record has been successfully created."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceRecordDto"
      tags:
        - "maintenance-record"
      security:
        - bearer: []
  /maintenance-record/{id}:
    get:
      operationId: "MaintenanceRecordController_getMaintenanceRecord"
      summary: "Get maintenance record by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "Return maintenance record details."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceRecordDto"
        404:
          description: "Maintenance record not found."
      tags:
        - "maintenance-record"
      security:
        - bearer: []
    put:
      operationId: "MaintenanceRecordController_updateMaintenanceRecord"
      summary: "Update a maintenance record"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMaintenanceRecordDto"
      responses:
        200:
          description: "The maintenance record has been successfully updated."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceRecordDto"
        404:
          description: "Maintenance record not found."
      tags:
        - "maintenance-record"
      security:
        - bearer: []
    delete:
      operationId: "MaintenanceRecordController_deleteMaintenanceRecord"
      summary: "Delete a maintenance record"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "The maintenance record has been successfully deleted."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceRecordDto"
        404:
          description: "Maintenance record not found."
      tags:
        - "maintenance-record"
      security:
        - bearer: []
  /maintenance-record/car/{carId}:
    get:
      operationId: "MaintenanceRecordController_getMaintenanceRecordsByCarId"
      summary: "Get all maintenance records for a specific car"
      parameters:
        - name: "carId"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "Return list of maintenance records."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/MaintenanceRecordDto"
        404:
          description: "Maintenance records not found."
      tags:
        - "maintenance-record"
      security:
        - bearer: []
  /document:
    post:
      operationId: "DocumentController_createDocument"
      summary: "Create a new document"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDocumentDto"
      responses:
        201:
          description: "The document has been successfully created."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentDto"
        403:
          description: "Forbidden."
      tags:
        - "document"
      security:
        - bearer: []
  /document/{id}:
    get:
      operationId: "DocumentController_getDocument"
      summary: "Get document by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "Return document details."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentDto"
        404:
          description: "Document not found."
      tags:
        - "document"
      security:
        - bearer: []
    put:
      operationId: "DocumentController_updateDocument"
      summary: "Update a document"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDocumentDto"
      responses:
        200:
          description: "The document has been successfully updated."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentDto"
        404:
          description: "Document not found."
      tags:
        - "document"
      security:
        - bearer: []
    delete:
      operationId: "DocumentController_deleteDocument"
      summary: "Delete a document"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "The document has been successfully deleted."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentDto"
        404:
          description: "Document not found."
      tags:
        - "document"
      security:
        - bearer: []
  /document/car/{carId}:
    get:
      operationId: "DocumentController_getDocumentsByCarId"
      summary: "Get all documents for a specific car"
      parameters:
        - name: "carId"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "Return list of documents."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/DocumentDto"
        404:
          description: "Documents not found."
      tags:
        - "document"
      security:
        - bearer: []
  /auth/google:
    get:
      operationId: "AuthController_googleAuth"
      summary: "Initiates Google OAuth flow"
      description: "Returns a redirect URL to Google for authentication via OAuth2."
      parameters: []
      responses:
        200:
          description: "Returns a redirect URL for authentication"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  redirectUrl:
                    type: "string"
        302:
          description: "Redirects to Google for authentication."
      tags:
        - "auth"
  /auth/google/redirect:
    get:
      operationId: "AuthController_googleAuthRedirect"
      summary: "Handles the Google OAuth redirect"
      description: "Processes the response from Google and returns an access token for authentication."
      parameters: []
      responses:
        200:
          description: "Returns an access token and refresh token."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  accessToken:
                    type: "string"
                  refreshToken:
                    type: "string"
        302:
          description: "Redirects the user back to the frontend with a JWT token."
      tags:
        - "auth"
  /auth/refresh-token:
    post:
      operationId: "AuthController_refreshToken"
      summary: "Refresh the access token"
      description: "Refresh the access token using a valid refresh token."
      parameters: []
      requestBody:
        required: true
        description: "The request body should contain a valid refresh token."
        content:
          application/json:
            schema:
              type: "object"
              properties:
                refreshToken:
                  type: "string"
                  description: "The refresh token to validate and use for access token generation."
      responses:
        200:
          description: "Successfully generated a new access token."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  accessToken:
                    type: "string"
                    description: "The new access token"
                  refreshToken:
                    type: "string"
                    description: "A new refresh token (if applicable)"
        403:
          description: "Refresh token is invalid or expired."
      tags:
        - "auth"
info:
  title: "History Auto Utility API"
  description: "API documentation for History Auto Utility"
  version: "1.0"
  contact: {}
tags: []
servers:
  - url: "http://localhost:3000"
    description: "development"
components:
  securitySchemes:
    bearer:
      scheme: "bearer"
      bearerFormat: "JWT"
      type: "http"
  schemas:
    AddCarDto:
      type: "object"
      properties:
        id:
          type: "number"
          example: "6"
        vin:
          type: "string"
          example: "WBAHE21060GE64612"
        make:
          type: "string"
          example: "BMW"
        model:
          type: "string"
          example: "530iA"
        year:
          type: "number"
          example: 1992
        license_plate:
          type: "string"
          example: "B13HAU"
        current_mileage:
          type: "number"
          example: 380000
        image:
          type: "string"
          example: "base64/someImageHere"
      required:
        - "id"
        - "vin"
        - "make"
        - "model"
        - "year"
        - "license_plate"
        - "current_mileage"
        - "image"
    CarDto:
      type: "object"
      properties:
        id:
          type: "number"
          example: 1
        user_id:
          type: "number"
          example: 123
        vin:
          type: "string"
          example: "1HGCM82633A123456"
        make:
          type: "string"
          example: "BMW"
        model:
          type: "string"
          example: "530iA"
        year:
          type: "number"
          example: 1992
        license_plate:
          type: "string"
          example: "B13HAU"
        current_mileage:
          type: "number"
          example: 380000
        image:
          type: "string"
          example: "base64/someImageHere"
      required:
        - "id"
        - "user_id"
        - "vin"
        - "make"
        - "model"
        - "year"
        - "license_plate"
        - "current_mileage"
        - "image"
    UpdateCarDto:
      type: "object"
      properties: {}
    CreateMaintenanceRecordDto:
      type: "object"
      properties:
        car_id:
          type: "number"
          example: "123"
        service_date:
          format: "date-time"
          type: "string"
          example: "2023-01-01T00:00:00.000Z"
        mileage:
          type: "number"
          example: "380000"
        description:
          type: "string"
          example: "Oil 10W40, air filter MANN"
        service_type:
          type: "string"
          example: "MAINTENANCE"
          enum:
            - "REPAIR"
            - "MAINTENANCE"
            - "IMPROVEMENT"
        service_category:
          type: "string"
          example: "OIL_CHANGE"
          enum:
            - "OIL_CHANGE"
            - "BRAKE_SERVICE"
            - "TRANSMISSION_SERVICE"
            - "TIRE_SERVICE"
            - "OTHER"
        cost:
          type: "number"
          example: "Insurance"
        expiry_date:
          format: "date-time"
          type: "string"
          example: "Insurance"
      required:
        - "car_id"
        - "service_date"
        - "mileage"
        - "description"
        - "service_type"
        - "service_category"
        - "cost"
        - "expiry_date"
    MaintenanceRecordDto:
      type: "object"
      properties:
        id:
          type: "number"
          example: "123"
        car_id:
          type: "number"
          example: "123"
        service_date:
          format: "date-time"
          type: "string"
          example: "2023-01-01T00:00:00.000Z"
        mileage:
          type: "number"
          example: "380000"
        description:
          type: "string"
          example: "Oil 10W40, air filter MANN"
        service_type:
          type: "string"
          example: "MAINTENANCE"
          enum:
            - "REPAIR"
            - "MAINTENANCE"
            - "IMPROVEMENT"
        service_category:
          type: "string"
          example: "OIL_CHANGE"
          enum:
            - "OIL_CHANGE"
            - "BRAKE_SERVICE"
            - "TRANSMISSION_SERVICE"
            - "TIRE_SERVICE"
            - "OTHER"
        cost:
          type: "number"
          example: "Insurance"
        expiry_date:
          format: "date-time"
          type: "string"
          example: "Insurance"
      required:
        - "id"
        - "car_id"
        - "service_date"
        - "mileage"
        - "description"
        - "service_type"
        - "service_category"
        - "cost"
        - "expiry_date"
    UpdateMaintenanceRecordDto:
      type: "object"
      properties: {}
    CreateDocumentDto:
      type: "object"
      properties:
        document_type:
          type: "string"
          example: "Insurance"
        issue_date:
          format: "date-time"
          type: "string"
          example: "2023-01-01T00:00:00.000Z"
        expiry_date:
          format: "date-time"
          type: "string"
          example: "2024-01-01T00:00:00.000Z"
        car_id:
          type: "number"
          example: 1
      required:
        - "document_type"
        - "issue_date"
        - "expiry_date"
        - "car_id"
    DocumentDto:
      type: "object"
      properties:
        id:
          type: "number"
          example: 1
        document_type:
          type: "string"
          example: "Insurance"
        issue_date:
          format: "date-time"
          type: "string"
          example: "2023-01-01T00:00:00.000Z"
        expiry_date:
          format: "date-time"
          type: "string"
          example: "2024-01-01T00:00:00.000Z"
        car_id:
          type: "number"
          example: 1
      required:
        - "id"
        - "document_type"
        - "issue_date"
        - "expiry_date"
        - "car_id"
    UpdateDocumentDto:
      type: "object"
      properties: {}
